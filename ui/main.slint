import { Button, VerticalBox, HorizontalBox, LineEdit, ProgressIndicator} from "std-widgets.slint";

enum Operation {
    Encryption,
    Decryption
}

export component MainWindow inherits Window {
    width: 400px;
    height: 300px;
    title: "FileGuard";

    in-out property <Operation> operation;
    in-out property <bool> is_processing;
    in-out property <bool> is_password_filled;
    in-out property <bool> is_file_included;
    in-out property <string> input_file;
    in-out property <string> input_password;

    callback select_file();
    callback remove_file();

    VerticalBox {
        padding: 20px;
        spacing: 15px;

        Rectangle {
            height: 50px;
            border-radius: 8px;
            border-width: 2px;

            TouchArea {
                double-clicked => {
                    root.select_file();
                }
            }

            Text {
                text: "Double click to attach file!";
                vertical-alignment: center;
                horizontal-alignment: center;
                visible: !is_file_included;
            }

            Text {
                text: "[TEMPORARY SOLUTION] Your file was attached :)";
                vertical-alignment: center;
                horizontal-alignment: center;
                visible: is_file_included;
            }

        }

        HorizontalBox {
            Text {
                text: "Password";
                vertical-alignment: center;
                horizontal-alignment: center;
                color: #fff;
            }
            LineEdit {
                input-type: password;
                placeholder-text: "Type the password";
                text <=> input_password;
                changed text => {
                    is_password_filled = self.text != "";
                }
            }
            spacing: 10px;
        }

        HorizontalBox {
            Button {
                text: "Encryption";
                clicked => {
                    operation = Operation.Encryption;
                }
            }
            Button {
                text: "Decryption";
                clicked => {
                    operation = Operation.Decryption;
                }
            }
        }

        HorizontalBox {
            alignment: center;
            Button {
                text: "Start processing";
                width: 150px;
                clicked => {
                    is_password_filled = true;
                    is_file_included = true;
                    if(is_file_included && is_password_filled) {
                        is_processing = true;
                        /*TODO call appropriate rust function*/
                    }
                }
            }
        }

        ProgressIndicator {
            visible: is_processing;
            indeterminate: true;
        }
    }
}
